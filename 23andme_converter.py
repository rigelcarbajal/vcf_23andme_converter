#!/usr/bin/env python
# encoding: utf-8

import sys
import re

def parse_vcf_line(line):
    fields = line.strip().split('\t')
    if len(fields) < 10:
        return None
    chrom = fields[0].replace('chr', '').upper()
    pos = fields[1]
    rsid = fields[2]
    ref = fields[3]
    alt = fields[4]
    genotype_field = fields[9]

    if not rsid.startswith("rs"):
        return None

    valid_chroms = [str(c) for c in range(1, 23)] + ['X', 'Y', 'MT']
    if chrom not in valid_chroms:
        return None

    genotype_code = genotype_field.split(':')[0]
    if genotype_code not in {'0/0', '0|0', '0/1', '0|1', '1/1', '1|1'}:
        return None

    gt = ''
    if '0' in genotype_code:
        gt += ref
    if '1' in genotype_code:
        gt += alt
    if genotype_code in {'0/0', '0|0'}:
        gt = ref + ref
    elif genotype_code in {'1/1', '1|1'}:
        gt = alt + alt
    elif '0' in genotype_code and '1' in genotype_code:
        gt = ref + alt

    return f"{rsid}\t{chrom}\t{pos}\t{gt}"


def convert_vcf_to_23andme(vcf_path, output_path):
    with open(vcf_path, 'r') as vcf, open(output_path, 'w') as out:
        out.write("# This data file was generated by a VCF to 23andMe format converter.\n")
        out.write("# It is not from 23andMe, and may not match their exact SNP set.\n")
        out.write("# rsid\tchromosome\tposition\tgenotype\n")
        for line in vcf:
            if line.startswith('#'):
                continue
            converted = parse_vcf_line(line)
            if converted:
                out.write(converted + '\n')

    print(f"\nâœ… Convertion Finished: {output_path}")


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Uso: python vcf_to_23andme.py input.vcf output.txt")
        sys.exit(1)

    vcf_file = sys.argv[1]
    output_file = sys.argv[2]
    convert_vcf_to_23andme(vcf_file, output_file)
  
